{"version":3,"sources":["Components/ImageGallery/ImageGallery.js","App.js","config.js","serviceWorker.js","index.js","logo.svg"],"names":["ImageGallery","posts","showHQImages","rowHeight","showNsfw","images","forEach","post","preview","previewImage","length","source","resolutions","stickied","over_18","push","src","url","thumbnail","thumbnailWidth","width","thumbnailHeight","height","caption","title","console","log","enableImageSelection","r","snoowrap","userAgent","clientId","clientSecret","username","password","App","selectedSub","useState","setPosts","isLoading","setIsLoading","setHQImages","setNsfw","setRowHeight","after","setAfter","subreddit","window","location","href","includes","split","getSubreddit","useBottomScrollListener","getHot","limit","then","newPosts","_query","catch","useEffect","type","min","max","value","onChange","event","target","checked","onClick","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.867cf2c2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Gallery from 'react-grid-gallery';\r\n\r\nconst ImageGallery = ({posts, showHQImages, rowHeight, showNsfw}) => {\r\n    const getPreviewImage = (preview) => {\r\n        return preview && preview.images && preview.images.length > 0 ?\r\n                            showHQImages ? \r\n                                preview.images[0] && preview.images[0].source\r\n                                :\r\n                                preview.images[0] && preview.images[0].resolutions && preview.images[0].resolutions.length > 1 ?\r\n                                        preview.images[0].resolutions.length > 3 ? \r\n                                            preview.images[0].resolutions[3] \r\n                                            :\r\n                                            preview.images[0].resolutions[preview.images[0].resolutions.length - 1]\r\n                                        :\r\n                                        null\r\n                                :\r\n                                null;\r\n    };\r\n    \r\n    let images = [];\r\n    posts && posts.forEach(post => {\r\n        const previewImage = getPreviewImage(post.preview);\r\n        if(previewImage && !post.stickied){\r\n            if(!showNsfw && post.over_18) return;\r\n            images.push({\r\n                src: post ? post.url : \"\",\r\n                thumbnail: previewImage ? previewImage.url : \"\",\r\n                thumbnailWidth: previewImage ? previewImage.width : \"\",\r\n                thumbnailHeight: previewImage ? previewImage.height : \"\",\r\n                caption: post ? post.title : \"\"\r\n            });\r\n        }\r\n    });\r\n    console.log(images);\r\n    return <Gallery images={images} enableImageSelection={false} rowHeight={rowHeight} />\r\n};\r\n\r\nexport default ImageGallery;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport snoowrap from 'snoowrap';\r\nimport { USER_AGENT, CLIENT_ID, CLIENT_SECRET, USERNAME, PASSWORD } from './config';\r\nimport ImageGrid from './Components/ImageGrid/ImageGrid';\r\nimport ImageGallery from './Components/ImageGallery/ImageGallery';\r\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\r\n\r\n\r\nconst r = new snoowrap({\r\n  userAgent: USER_AGENT,\r\n  clientId: CLIENT_ID,\r\n  clientSecret: CLIENT_SECRET,\r\n  username: USERNAME,\r\n  password: PASSWORD\r\n});\r\n\r\nconst App = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [showHQImages, setHQImages] = useState(false);\r\n  const [showNsfw, setNsfw] = useState(false);\r\n  const [rowHeight, setRowHeight] = useState(550);\r\n  const [after, setAfter] = useState();\r\n  let postLimit = 10;\r\n  let subreddit = \"popular\";\r\n  let selectedSub;\r\n\r\n  if(window.location.href.includes(\"/r/\")){\r\n    subreddit = window.location.href.split(\"/r/\")[1];\r\n  }\r\n  selectedSub = r.getSubreddit(subreddit);\r\n\r\n  const toggleHQImage = () => {\r\n    setHQImages(!showHQImages);\r\n  }\r\n  \r\n  const loadMore = () => {\r\n    selectedSub.getHot({after:after,limit:postLimit}).then(newPosts => {\r\n      console.log(newPosts);\r\n      setAfter(newPosts._query.after);\r\n      setPosts([...posts, ...newPosts]);\r\n      setIsLoading(false);\r\n    }).catch(() => {\r\n      setIsLoading(false);\r\n    })\r\n  }\r\n  useBottomScrollListener(loadMore, 500);\r\n  useEffect(() => {\r\n    selectedSub.getHot({after:after,limit:postLimit}).then(posts => {\r\n      console.log(posts)\r\n      setAfter(posts._query.after);\r\n      setPosts(posts);\r\n      setIsLoading(false);\r\n    }).catch(() => {\r\n      setIsLoading(false);\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <input type=\"range\" min=\"550\" max=\"1500\" value={rowHeight} onChange={(event) => setRowHeight(event.target.value)} />\r\n      {rowHeight}\r\n      <br /><br />\r\n      Show source images <input type=\"checkbox\" checked={showHQImages} onClick={toggleHQImage}></input>\r\n      NSFW <input type=\"checkbox\" checked={showNsfw} onClick={() => setNsfw(!showNsfw)} />\r\n      <br /><br />\r\n      {isLoading ? \"Loading...\" : (\r\n        <Fragment>\r\n          <ImageGallery posts={posts} rowHeight={rowHeight} showHQImages={showHQImages} showNsfw={showNsfw} />\r\n        </Fragment>\r\n        // <div>\r\n        //   <h3>{posts.length} posts from {subreddit} </h3>\r\n        //   {\r\n        //     posts.map((post, index) => {\r\n        //       console.log(post.url)\r\n        //       if(!post.stickied){\r\n        //         return (\r\n        //           <ImageGrid title={post.title} url={post.url} key={index} preview={post.preview} showHQImages={showHQImages} />\r\n        //         );\r\n        //       }\r\n        //     })\r\n        //   }\r\n        // </div>\r\n      )\r\n      }\r\n    </Fragment> \r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const USER_AGENT = \"web:grid-app:v1.0 (by /u/grid-app-demo-ac)\";\r\nexport const CLIENT_ID = \"uG-O9jDW6uAyvQ\";\r\nexport const CLIENT_SECRET = \"wVHPfasFnKDMpM9_0PGRh7mtsDA\";\r\nexport const USERNAME = \"grid-app-demo-acc\";\r\nexport const PASSWORD = \"app-demo-pass\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}