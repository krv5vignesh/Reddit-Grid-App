{"version":3,"sources":["Components/ImageGrid/ImageGrid.js","Components/Search/Search.js","App.js","config.js","serviceWorker.js","index.js"],"names":["ImageGrid","title","url","preview","showHQImages","previewImage","enabled","images","length","source","resolutions","useState","isImage","setIsImage","setIsVideo","useEffect","includes","console","log","endsWith","src","width","Search","reddit","changeSubreddit","options","setOptions","dropdownMatchSelectWidth","style","onSelect","onSearch","query","searchSubredditNames","then","result","map","sub","catch","error","placeholder","Header","Layout","Content","antIcon","LoadingOutlined","fontSize","spin","r","snoowrap","userAgent","clientId","clientSecret","username","password","App","posts","setPosts","isLoading","setIsLoading","setHQImages","showNsfw","setNsfw","after","setAfter","subreddit","setSubreddit","loadMoreSpinner","setLoadMoreSpinner","useBottomScrollListener","getSubreddit","getHot","limit","newPosts","_query","subredditName","fetchData","className","position","zIndex","span","value","Item","label","onChange","padding","gutter","xs","sm","md","lg","indicator","columnWidth","post","index","stickied","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e63e7166.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\r\n\r\nconst ImageGrid = ({title, url, preview, showHQImages}) => {\r\n    const previewImage = preview && preview.enabled && preview.images && preview.images.length > 0 ?\r\n                            showHQImages ? \r\n                                preview.images[0] && preview.images[0].source\r\n                                :\r\n                                preview.images[0] && preview.images[0].resolutions && preview.images[0].resolutions.length > 1 ?\r\n                                        preview.images[0].resolutions.length > 3 ? \r\n                                            preview.images[0].resolutions[3] \r\n                                            :\r\n                                            preview.images[0].resolutions[preview.images[0].resolutions.length - 1]\r\n                                        :\r\n                                        null\r\n                                :\r\n                                null;\r\n\r\n    const [isImage, setIsImage] = useState(false);\r\n    const [isVideo, setIsVideo] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        if(url.includes(\"v.redd\")){\r\n            console.log(\"Video\");\r\n            setIsVideo(true);\r\n            setIsImage(false);\r\n        }else if(url.endsWith(\".gifv\") || url.includes(\"gfycat\")){\r\n            setIsImage(false);\r\n            setIsVideo(false);\r\n        }else if(url.includes(\"i.redd\") || url.includes(\"imgur\")){\r\n            setIsImage(true);\r\n        }\r\n    }, []);\r\n    \r\n    return (\r\n        isImage && previewImage && <img src={previewImage.url} width={\"100%\"} />\r\n    );\r\n};\r\n\r\nexport default ImageGrid;","import React, { useState } from 'react';\r\nimport { Input, AutoComplete } from 'antd';\r\n\r\nconst Search = ({reddit, changeSubreddit}) => {\r\n  const [options, setOptions] = useState();\r\n\r\n  const handleSearch = query => {\r\n    reddit.searchSubredditNames({query: query}).then(result => {\r\n        result = result.map(sub => {\r\n            return {\r\n                'value' : sub\r\n            }\r\n        })\r\n        setOptions(result ? result : []);\r\n    }).catch((error) => {\r\n    })\r\n  };\r\n\r\n  return (\r\n    <AutoComplete\r\n      dropdownMatchSelectWidth={252}\r\n      style={{\r\n        width: 500,\r\n      }}\r\n      options={options}\r\n      onSelect={changeSubreddit}\r\n      onSearch={handleSearch}\r\n      placeholder={\"Search subreddit\"}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Search;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport './App.css';\r\nimport snoowrap from 'snoowrap';\r\nimport { USER_AGENT, CLIENT_ID, CLIENT_SECRET, USERNAME, PASSWORD } from './config';\r\nimport ImageGrid from './Components/ImageGrid/ImageGrid';\r\nimport ImageGallery from './Components/ImageGallery/ImageGallery';\r\nimport Search from './Components/Search/Search';\r\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\r\nimport StackGrid from \"react-stack-grid\";\r\nimport 'antd/dist/antd.dark.css';\r\nimport { Row, Col, Layout, Form, Spin, Switch  } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport './App.css'\r\n\r\nconst { Header, Content } = Layout;\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 80 }} spin />;\r\n\r\nconst r = new snoowrap({\r\n  userAgent: USER_AGENT,\r\n  clientId: CLIENT_ID,\r\n  clientSecret: CLIENT_SECRET,\r\n  username: USERNAME,\r\n  password: PASSWORD\r\n});\r\n\r\nconst App = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [showHQImages, setHQImages] = useState(false);\r\n  const [showNsfw, setNsfw] = useState(false);\r\n  const [after, setAfter] = useState();\r\n  const [subreddit, setSubreddit] = useState(\"popular\");\r\n  const [loadMoreSpinner, setLoadMoreSpinner] = useState(false);\r\n\r\n  let postLimit = 20;\r\n\r\n  const toggleHQImage = () => {\r\n    setHQImages(!showHQImages);\r\n  }\r\n  \r\n  const fetchData = (subredditName = subreddit) => {\r\n    r.getSubreddit(subredditName).getHot({limit:postLimit}).then(posts => {\r\n      console.log(posts)\r\n      setAfter(posts._query.after);\r\n      setPosts(posts);\r\n      setIsLoading(false);\r\n    }).catch(() => {\r\n      setIsLoading(false);\r\n    });\r\n  }\r\n  const loadMore = () => {\r\n    setLoadMoreSpinner(true);\r\n    r.getSubreddit(subreddit).getHot({after:after,limit:postLimit}).then(newPosts => {\r\n      console.log(newPosts);\r\n      setAfter(newPosts._query.after);\r\n      setPosts([...posts, ...newPosts]);\r\n      setLoadMoreSpinner(false);\r\n    }).catch(() => {\r\n      setLoadMoreSpinner(false);\r\n    });\r\n  }\r\n\r\n  const changeSubreddit = (value) => {\r\n    setSubreddit(value);\r\n  }\r\n\r\n  useBottomScrollListener(loadMore, 3000);\r\n\r\n  useEffect(() => {\r\n    console.log(showHQImages);\r\n    console.log(showNsfw);\r\n    fetchData();\r\n  }, [subreddit]);\r\n\r\n  return (\r\n    <Layout className=\"layout\">\r\n      <Header style={{position:'fixed', zIndex: 3, width: '100%'}}>\r\n        <Row>\r\n            <Col span={16}>\r\n              <Search reddit={r} changeSubreddit={changeSubreddit} />\r\n            </Col>\r\n            <Col span={6}>\r\n              <Row>\r\n                <Col span={12}>\r\n                  <Form.Item label=\"Show source images\">\r\n                    <Switch onChange={toggleHQImage} />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={12}>\r\n                  <Form.Item label=\"NSFW\">\r\n                    <Switch onChange={() => setNsfw(!showNsfw)}/>\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n      </Header>\r\n      <Content style={{ padding: '0 50px' }}>\r\n        <div className=\"site-layout-content\">\r\n          \r\n          <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n            <Col span={24}>\r\n              {isLoading ? \r\n                    <Spin indicator={antIcon} />\r\n                    : \r\n                    (\r\n                    /* <Fragment>\r\n                      <ImageGallery posts={posts} rowHeight={rowHeight} showHQImages={showHQImages} showNsfw={showNsfw} />\r\n                    </Fragment> */\r\n                    <Fragment>\r\n                      <h3>{posts.length} posts from {subreddit} </h3>\r\n                      <StackGrid \r\n                        columnWidth={\"33.33%\"}\r\n                      >\r\n                        {\r\n                          posts.map((post, index) => {\r\n                            if(!post.stickied){\r\n                              return (\r\n                                <ImageGrid title={post.title} url={post.url} key={index} preview={post.preview} showHQImages={showHQImages} />\r\n                              );\r\n                            }\r\n                          })\r\n                        }\r\n                      {loadMoreSpinner && <Spin indicator={antIcon} />}\r\n                      </StackGrid>\r\n                    </Fragment>\r\n                  )\r\n                  }\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const USER_AGENT = \"web:grid-app:v1.0 (by /u/grid-app-demo-ac)\";\r\nexport const CLIENT_ID = \"uG-O9jDW6uAyvQ\";\r\nexport const CLIENT_SECRET = \"wVHPfasFnKDMpM9_0PGRh7mtsDA\";\r\nexport const USERNAME = \"grid-app-demo-acc\";\r\nexport const PASSWORD = \"app-demo-pass\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}